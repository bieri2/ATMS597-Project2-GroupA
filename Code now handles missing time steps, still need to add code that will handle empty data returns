{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of groupa_project2.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOaKAd3xsmulboXHk9iCOKk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bieri2/ATMS597-Project2-GroupA/blob/master/Code%20now%20handles%20missing%20time%20steps%2C%20still%20need%20to%20add%20code%20that%20will%20handle%20empty%20data%20returns\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m4-9znEOgwVw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Import necessary modules\n",
        "import numpy as np\n",
        "import requests\n",
        "import pandas as pd\n",
        "import calendar\n",
        "import seaborn as sns\n",
        "import datetime\n",
        "import matplotlib.pyplot as plt\n",
        "from   matplotlib.pyplot import cm\n",
        "import matplotlib as mpl"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uxldTy-ehdxq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Define function to download data from NCEI\n",
        "# Function adapted from Stefanie Moline: https://github.com/stefmolin/Hands-On-Data-Analysis-with-Pandas/\n",
        "\n",
        "def make_request(endpoint, token, payload=None):\n",
        "    \"\"\"\n",
        "    Make a request to a specific endpoint on the NCDC Web API\n",
        "    passing headers and optional payload.\n",
        "    \n",
        "    Parameters:\n",
        "        - endpoint : The endpoint of the API you want to \n",
        "                    make a GET request to (string).\n",
        "        - token : User-specific access token from NCEI (string)\n",
        "        - payload : A dictionary of data to pass along \n",
        "                   with the request.\n",
        "    \n",
        "    Returns:\n",
        "        Response object.\n",
        "    \"\"\"\n",
        "    return requests.get(\n",
        "        f'https://www.ncdc.noaa.gov/cdo-web/api/v2/{endpoint}',\n",
        "        headers={\n",
        "            'token': token \n",
        "        },\n",
        "        params=payload\n",
        "    )"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BLeJF51NoJog",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def stripes_inputs(stationid, token, start, end):\n",
        "    \"\"\"\n",
        "    A Python function that takes in a station ID, start year, and\n",
        "    end year and downloads the necessary data from\n",
        "    the Global Historical Climatology Network.\n",
        "    \n",
        "    Parameters:\n",
        "        - stationid (string) : Station ID.\n",
        "        - token (string) : User-specific access token from NCEI.\n",
        "        - start (integer) : Start year.\n",
        "        - end (integer) : End year.\n",
        "    \n",
        "    Returns:\n",
        "        GHCN dataset as specified that can then be read as a dataframe.\n",
        "    \"\"\" \n",
        "    \n",
        "    # Define empty list\n",
        "    results = []\n",
        "    for i in range(start,end):\n",
        "          print('fetching data for ' + str(i))\n",
        "          response = make_request(\n",
        "              'data', token, \n",
        "              {\n",
        "                  'datasetid' : 'GHCND', # Global Historical Climatology Network - Daily (GHCND) dataset\n",
        "                  'stationid' : f'{stationid}', # Input station ID\n",
        "                  'startdate' : datetime.date(i,1,1), # Input start date as Datetime object\n",
        "                  'enddate'   : datetime.date(i,12,31), # Input end date as Datetime object\n",
        "                  'datatypeid': ['TMAX', 'TMIN'], # Input requested variables\n",
        "                  'units'     : 'metric', \n",
        "                  'limit'     : 1000\n",
        "              }\n",
        "          )\n",
        "\n",
        "          if response.ok:\n",
        "               # we extend the list instead of appending to avoid getting a nested list\n",
        "               results.extend(response.json()['results'])\n",
        "    return results"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n3f2AXlxDBEg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Method to plot Climate (Warming) Stripes and/or Time Series (if asked) :\n",
        "def plot_stripes(df, station_name, tunit, plot_tseries = 'n'):\n",
        "    \"\"\"\n",
        "    A Python function that takes in max/min data for a given station and \n",
        "    plots Climate Stripes and/or Time-Series, if user asks for one.\n",
        "    \n",
        "    Parameters:\n",
        "        - df (DataFrame): Pandas DataFrame which includes minimum and maximum temperature values.\n",
        "                          The DataFrame should have columns named 'TMAX' and 'TMIN', as well as a Datetime index.\n",
        "        - station_name (string): String name of the Station.\n",
        "        - tunit (string): Time unit for temporal average to be applied to data before plotting.\n",
        "                          Possible values are 'Y' for year (annual average), 'M' for month (monthly average), \n",
        "                          and 'W' for week (weekly average).\n",
        "        - plot_tseries (string) : Character variable with user choice for either\n",
        "                                  plotting or not plotting Time-series line. Either 'y' or 'n'.\n",
        "    \n",
        "    Returns:\n",
        "        Output Image as either a Climate Stripes with/without a time series.\n",
        "    \"\"\"  \n",
        "    ## call figure and define plot titles\n",
        "    plt.figure(figsize=(12,20))\n",
        "    plt.title(station_name, fontsize=14)\n",
        "\n",
        "    ## Resample data to desired frequency and take mean at that frequency\n",
        "    df = df.resample(tunit).mean()\n",
        "\n",
        "    t     = df.index\n",
        "    num_t = len(t)\n",
        "\n",
        "    ## Get data for 1970-2000 - will be used for baseline average\n",
        "    df_base  = df[(t.year <= 2000) & (t.year >= 1970)]\n",
        "\n",
        "    ## Calculate mean between TMAX and TMIN for whole period\n",
        "    AvT      = df[['TMAX', 'TMIN']].mean(axis=1)\n",
        "    ## Calculate baseline average from 1970-2000\n",
        "    AvT_base = df_base[['TMAX', 'TMIN']].mean(axis=1).mean()\n",
        "    ## Calculate standard deviation for annual average values for whole period\n",
        "    AvT_stddev = AvT.std()\n",
        "    \n",
        "    ## Calculate anomalies using baseline average\n",
        "    Tanoms = (AvT.values-AvT_base)\n",
        "\n",
        "    ## calculate fraction of maximum T for the time-series :\n",
        "    #points = Tav/np.nanmax(AvT)*len(Tav)\n",
        "\n",
        "    ## Create dummy array to use for line graph \n",
        "    X = np.arange(num_t)\n",
        "\n",
        "    ## Plot stripes and time-series if necessary :  \n",
        "    ## Use standard deviation to scale colors \n",
        "    plt.imshow(Tanoms[np.newaxis,:], origin = 'lower', extent = (min(X),max(X),min(AvT)-50,max(AvT)+50), \n",
        "               cmap = 'seismic', vmin = (AvT_stddev*-2.6), vmax = (AvT_stddev*2.6))\n",
        "    ## Add line plot and axes if user requests it\n",
        "    if (plot_tseries == 'y'):\n",
        "        plt.plot(X,  AvT, marker = 'o', color='yellow') \n",
        "        plt.ylim(min(AvT)-5,max(AvT)+5)\n",
        "        plt.ylabel('Average temperature')\n",
        "        plt.xlabel('Year')\n",
        "        plt.xticks(X[::10],t[::10].strftime(\"%Y\"))\n",
        "    else:\n",
        "        plt.axis('off') # Default is to suppress the axes\n",
        " \n",
        "    ## Save figure as .png\n",
        "    # plt.savefig(station_name+'_ClimateStripes_'+str(start)+'_'+str(end)+'.png', bbox_inches='tight',dpi=400)\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oPslNcxvD6PQ",
        "colab_type": "code",
        "outputId": "fac3f126-6621-4cfe-bff9-fcd53105f729",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "## Execute code below if this is the main script\n",
        "if __name__ == '__main__':\n",
        "    ## Read Example Data\n",
        "    #station_name='Austin'\n",
        "    #t = np.loadtxt('ClimateStripesData.txt', skiprows=2, usecols=[0])\n",
        "    #Tmax = np.loadtxt('ClimateStripesData.txt', skiprows=2, usecols=[2])\n",
        "    #Tmin = np.loadtxt('ClimateStripesData.txt', skiprows=2, usecols=[3])\n",
        "\n",
        "    ## Define start and end times\n",
        "    starttime = 1903\n",
        "    endtime   = 2020\n",
        "    ## Define user-specific token\n",
        "    token     = 'fqMFYJqPpWnQIARJzXBQhWPbYEtJwpoH'\n",
        "    ## Define station ID\n",
        "    stationid = 'GHCND:USC00424856' # Random station in Utah\n",
        "    ## Read in data from GHCN\n",
        "    data      = stripes_inputs(stationid, token, starttime, endtime)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "fetching data for 1903\n",
            "fetching data for 1904\n",
            "fetching data for 1905\n",
            "fetching data for 1906\n",
            "fetching data for 1907\n",
            "fetching data for 1908\n",
            "fetching data for 1909\n",
            "fetching data for 1910\n",
            "fetching data for 1911\n",
            "fetching data for 1912\n",
            "fetching data for 1913\n",
            "fetching data for 1914\n",
            "fetching data for 1915\n",
            "fetching data for 1916\n",
            "fetching data for 1917\n",
            "fetching data for 1918\n",
            "fetching data for 1919\n",
            "fetching data for 1920\n",
            "fetching data for 1921\n",
            "fetching data for 1922\n",
            "fetching data for 1923\n",
            "fetching data for 1924\n",
            "fetching data for 1925\n",
            "fetching data for 1926\n",
            "fetching data for 1927\n",
            "fetching data for 1928\n",
            "fetching data for 1929\n",
            "fetching data for 1930\n",
            "fetching data for 1931\n",
            "fetching data for 1932\n",
            "fetching data for 1933\n",
            "fetching data for 1934\n",
            "fetching data for 1935\n",
            "fetching data for 1936\n",
            "fetching data for 1937\n",
            "fetching data for 1938\n",
            "fetching data for 1939\n",
            "fetching data for 1940\n",
            "fetching data for 1941\n",
            "fetching data for 1942\n",
            "fetching data for 1943\n",
            "fetching data for 1944\n",
            "fetching data for 1945\n",
            "fetching data for 1946\n",
            "fetching data for 1947\n",
            "fetching data for 1948\n",
            "fetching data for 1949\n",
            "fetching data for 1950\n",
            "fetching data for 1951\n",
            "fetching data for 1952\n",
            "fetching data for 1953\n",
            "fetching data for 1954\n",
            "fetching data for 1955\n",
            "fetching data for 1956\n",
            "fetching data for 1957\n",
            "fetching data for 1958\n",
            "fetching data for 1959\n",
            "fetching data for 1960\n",
            "fetching data for 1961\n",
            "fetching data for 1962\n",
            "fetching data for 1963\n",
            "fetching data for 1964\n",
            "fetching data for 1965\n",
            "fetching data for 1966\n",
            "fetching data for 1967\n",
            "fetching data for 1968\n",
            "fetching data for 1969\n",
            "fetching data for 1970\n",
            "fetching data for 1971\n",
            "fetching data for 1972\n",
            "fetching data for 1973\n",
            "fetching data for 1974\n",
            "fetching data for 1975\n",
            "fetching data for 1976\n",
            "fetching data for 1977\n",
            "fetching data for 1978\n",
            "fetching data for 1979\n",
            "fetching data for 1980\n",
            "fetching data for 1981\n",
            "fetching data for 1982\n",
            "fetching data for 1983\n",
            "fetching data for 1984\n",
            "fetching data for 1985\n",
            "fetching data for 1986\n",
            "fetching data for 1987\n",
            "fetching data for 1988\n",
            "fetching data for 1989\n",
            "fetching data for 1990\n",
            "fetching data for 1991\n",
            "fetching data for 1992\n",
            "fetching data for 1993\n",
            "fetching data for 1994\n",
            "fetching data for 1995\n",
            "fetching data for 1996\n",
            "fetching data for 1997\n",
            "fetching data for 1998\n",
            "fetching data for 1999\n",
            "fetching data for 2000\n",
            "fetching data for 2001\n",
            "fetching data for 2002\n",
            "fetching data for 2003\n",
            "fetching data for 2004\n",
            "fetching data for 2005\n",
            "fetching data for 2006\n",
            "fetching data for 2007\n",
            "fetching data for 2008\n",
            "fetching data for 2009\n",
            "fetching data for 2010\n",
            "fetching data for 2011\n",
            "fetching data for 2012\n",
            "fetching data for 2013\n",
            "fetching data for 2014\n",
            "fetching data for 2015\n",
            "fetching data for 2016\n",
            "fetching data for 2017\n",
            "fetching data for 2018\n",
            "fetching data for 2019\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WBY8gZCHMaiu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Create temporary data-frame with all data:\n",
        "df_temp = pd.DataFrame(data)\n",
        "## Set date column as index\n",
        "df_temp = df_temp.set_index(pd.to_datetime(df_temp['date'])).drop(columns = 'date')\n",
        "## Define new DataFrame with only TMAX and fill in missing values by resampling\n",
        "df = df_temp[df_temp['datatype'] == 'TMAX'].resample('D').asfreq()\n",
        "## Rename the 'value' column as 'TMAX'\n",
        "df = df.rename(columns = {'value':'TMAX'})\n",
        "## Add TMIN data to DataFrame from temporary DataFrame\n",
        "df['TMIN'] = df_temp[df_temp['datatype'] == 'TMIN'].resample('D').asfreq()['value']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O4e8UqSxfOyM",
        "colab_type": "code",
        "outputId": "cacf95fd-715b-4fdd-ed12-e08c35142daa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 180
        }
      },
      "source": [
        "## Use seaborn to make nice plots\n",
        "sns.set(style='white')\n",
        "## Plot climate stripes at specified frequency and station\n",
        "plot_stripes(df, station_name = 'Laketown, Utah', tunit = 'Y', plot_tseries = 'y')"
      ],
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x1440 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rLqHDwMObLbN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}